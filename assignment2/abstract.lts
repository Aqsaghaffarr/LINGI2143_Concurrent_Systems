const N = 2
range Ids = 0..N-1

set Messages = {token, claim[Ids]}

NODE(I=0) 	= 	IDLE, 
IDLE 		= 	(rcv.token -> LEADER
				| snd.claim[I] -> ELIGIBLE
				| rcv.claim[j:Ids] ->
								if(j < I) then (snd.claim[j] -> IDLE)
								else IDLE),
LEADER 		= 	(open->close->snd.token->IDLE
				| snd.token->IDLE),
ELIGIBLE	=	( snd.claim[I] -> ELIGIBLE
				| rcv.token -> LEADER
				| rcv.claim[j:Ids] ->
								if (j == I) then LEADER
								else 
									if (j < I) then (snd.claim[j] -> IDLE)
									else ELIGIBLE) + {snd.claim[Ids]}.

CHANNEL	= (in[m:Messages] -> out[m] -> CHANNEL).



||ELECTIONRING = (node[i:Ids]:NODE(i) || channel[i:Ids]:CHANNEL)
		 		/  {node[i:Ids].snd/channel[i].in,
					node[i:Ids].rcv/channel[(i+1)%N].out}.

||ABSTRACT0 = ELECTIONRING.
||ABSTRACT1 = ABSTRACT0\{node[Ids].rcv.token}.
||ABSTRACT2 = ABSTRACT1\{node[Ids].snd.token}.
||ABSTRACT3 = ABSTRACT2\{node[Ids].rcv.claim}.
||ABSTRACT4 = ABSTRACT3\{node[Ids].snd.claim}.
